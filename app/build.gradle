apply plugin: 'com.android.application'
//apply plugin: 'com.mob.sdk'
//MobSDK {
//	appKey '123456'
//	appSecret '123456'
//};
apply plugin: 'com.getkeepsafe.dexcount'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"

    defaultConfig {
        applicationId "com.xzh.androidbase"
        minSdkVersion 16
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName()]
                // includeCompileClasspath true
            }
        }


        signingConfigs {
            debug {
                storeFile file('/home/xzh/.android/androidbase.jks')
                storePassword '123456'
                keyAlias = 'key0'
                keyPassword '123456'
            }
        }

        lintOptions {
            // checkReleaseBuilds false
            // Or, if you prefer, you can continue to check for errors in release builds,
            // but continue the build even when errors are found:
            //  abortOnError false

            //  tasks.lint.enabled = true

            // disable 'GoogleAppIndexingWarning','TypographyFractions', 'TypographyQuotes'
            //  baseline file("lint-baseline.xml") // your choice of filename/path here
        }

//        aaptOptions{
//            cruncherEnabled=false
//        }

        multiDexEnabled false
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
//主要为了提高MulitDex的效率，不过好像已经不需要了
//    productFlavors {
//        // Includes settings you want to keep only while developing your app.
//        dev {
//            // Enables pre-dexing for command line builds. When using
//            // Android Studio 2.3 or higher, the IDE enables pre-dexing
//            // when deploying your app to a device running Android 5.0
//            // (API level 21) or higher—regardless of what you set for
//            // minSdkVersion.
//            minSdkVersion 21
//        }
//        prod {
//            // If you've configured the defaultConfig block for the production version of
//            // your app, you can leave this block empty and Gradle uses configurations in
//            // the defaultConfig block instead. You still need to include this flavor.
//            // Otherwise, all variants use the "dev" flavor configurations.
//        }
    //  }

    buildTypes {
        release {
            android.applicationVariants.all { variant ->
                variant.outputs.all {
                    //outputFileName = "app-${defaultConfig.versionName}-beta1-${releaseTime()}.apk"
                    outputFileName = "app-beta1-${releaseTime()}.apk"
                }
            }


            // 混淆
            minifyEnabled false
            // Zipalign优化
            zipAlignEnabled false
            // 移除无用的resource文件
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

}


dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    if (!isModule.toBoolean()) {
        implementation project(':login')
        implementation project(':module1')
        implementation project(':module2')
        implementation project(':module3')
    }


    //recyclerview
    implementation 'com.github.CymChad:BaseRecyclerViewAdapterHelper:2.9.50'
    implementation 'androidx.recyclerview:recyclerview:1.2.1'


    // implementation 'com.google.android.material:material:1.2.1'


    implementation 'androidx.multidex:multidex:2.0.1'


    //recyclerview
    implementation 'com.github.CymChad:BaseRecyclerViewAdapterHelper:2.9.50'
    implementation 'androidx.recyclerview:recyclerview:1.2.1'


    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'


    //butterknife
    implementation 'com.jakewharton:butterknife:10.2.3'
    annotationProcessor 'com.jakewharton:butterknife-compiler:10.2.3'

    //glide
    implementation 'com.github.bumptech.glide:glide:4.11.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.11.0'

    //rxjava2
    implementation 'io.reactivex.rxjava2:rxjava:2.2.19'
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'

    //retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.7.2'
    implementation 'com.squareup.okhttp3:okhttp:3.12.1'
    implementation 'org.ligboy.retrofit2:converter-fastjson-android:2.1.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.1.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.4.1'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.3.0'


    // implementation "androidx.viewpager2:viewpager2:1.0.0"
    implementation 'com.github.Vincent7Wong:EasyNavigation:2.0.5'


    api 'com.alibaba:arouter-api:1.5.2'
    annotationProcessor 'com.alibaba:arouter-compiler:1.5.2'

    // implementation 'com.blankj:utilcodex:1.29.0'

    //implementation "com.google.guava:guava:31.0.1-android"

    //dagger
    implementation 'com.google.dagger:dagger:2.26'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.26'

}

def releaseTime() {
    return new Date().format("yyyyMMddHHmm", TimeZone.getTimeZone("GMT+08:00"))
}
